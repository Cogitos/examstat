install.packages("tidyverse")
install.packages("xml2")
install.packages("xml2")
install.packages("tidyverse")
install.packages("httr")
install.packages("httr")
install.packages("tidyverse")
install.packages("curl")
install.packages("libcurl4-openssl-dev")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("afex")
install.packages("afex")
read.csv("FACESIdentification.csv")
# Read database
faces = read.csv("FACESIdentification.csv")
library(tidyr)
library(tidyverse)
glimpse(faces)
faces %>%
filter(Mean.identification < 91 & Mean.identification > 84)
faces %>%
filter(Mean.identification < 91 & Mean.identification > 84,
Happiness > 75, Disgusted > 75, Fearful > 75, Neutral > 75)
faces %>%
filter(Mean.identification < 91 & Mean.identification > 84,
Happiness > 75, Disgusted > 75, Fearful > 75, Neutral > 75) %>%
arrange(desc(Happiness))
faces %>%
group_by(Age, Sex) %>%
filter(Mean.identification < 91 & Mean.identification > 84,
Happiness > 75, Disgusted > 75, Fearful > 75, Neutral > 75) %>%
arrange(desc(Happiness))
faces %>%
filter(Mean.identification < 91 & Mean.identification > 84,
Happiness > 75, Disgusted > 75, Fearful > 75, Neutral > 75) %>%
arrange(Age, Sex, desc(Happiness))
facesSelection =
faces %>%
filter(Mean.identification < 91 & Mean.identification > 84,
Happiness > 75, Disgusted > 75, Fearful > 75, Neutral > 75) %>%
arrange(Age, Sex, desc(Happiness))
write.csv(facesSelection, file="FACESselected.csv", row.names = F)
facesSelection =
faces %>%
filter(Mean.identification < 91 & Mean.identification > 80,
Happiness > 75, Disgusted > 75, Fearful > 75, Neutral > 75) %>%
arrange(Age, Sex, Happiness)
write.csv(facesSelection, file="FACESselected.csv", row.names = F)
write.csv(facesSelection, file="FACESselected.csv", row.names = F)
facesSelection =
faces %>%
filter(Mean.identification < 91 & Mean.identification > 75,
Happiness > 75, Disgusted > 75, Fearful > 75, Neutral > 75) %>%
arrange(Age, Sex, Happiness)
write.csv(facesSelection, file="FACESselected.csv", row.names = F)
facesSelection =
faces %>%
filter(Mean.identification < 91 & Mean.identification > 75,
Happiness > 72, Disgusted > 72, Fearful > 72, Neutral > 72) %>%
arrange(Age, Sex, Happiness)
write.csv(facesSelection, file="FACESselected.csv", row.names = F)
library(tidyverse)
# Read database
faces = read.csv("FACESIdentification.csv")
glimpse(faces)
descp = faces %>%
group_by(Emotion, Age, Sex) %>%
summarise(min=min(Identification), max=max(Identification),
avg=mean(Identification), sd=sd(Identification))
descp
knitr::kable(descp)
knitr::kable(descp, digits=2)
facesSelection =
faces %>%
arrange(Emotion, Age, Sex)
write.csv(facesSelection, file="FACESselected.csv", row.names = F)
facesSelection =
faces %>%
filter(Identification < 91 & Identification > 75,
arrange(Emotion, Age, Sex)
facesSelection
facesSelection =
faces %>%
filter(Identification < 91 & Identification > 75),
facesSelection =
faces %>%
filter(Identification < 91 & Identification > 75) %>%
arrange(Emotion, Age, Sex)
facesSelection
library(DT)
datatable(facesSelection)
facesSelection =
faces %>%
filter(Identification < 95 & Identification > 80) %>%
arrange(Emotion, Age, Sex, desc(Identification))
datatable(facesSelection)
facesSelection %>% group_by(Emotion, Age, Sex) %>% slice_head(8)
facesSelection %>% group_by(Emotion, Age, Sex) %>% slice_head(n=8)
facesSelection %>% group_by(Emotion, Age, Sex) %>% slice_head(n=6)
selected = facesSelection %>% group_by(Emotion, Age, Sex) %>% slice_head(n=6)
library(afex)
library(afex)
aov_ez(selected, dv="Identification", within=c("Emotion","Group", "Sex"))
aov_ez(data=selected, dv="Identification", within=c("Group", "Sex"), between="Emotion")
aov_ez(data=selected, dv="Identification", between=c("Emotion","Group", "Sex"))
selected
selected$Id = 1:140
aov_ez(data=selected, dv="Identification", between=c("Emotion","Group", "Sex"), id="Id")
aov_ez(data=selected, dv="Identification", between=c("Emotion","Age", "Sex"), id="Id")
ggplot(data = selected, aes(y = Identification, x=Emotion)) +
geom_histogram()
ggplot(data = selected, aes(y = Identification, x=Emotion)) +
boxplot()
ggplot(data = selected, aes(y = Identification, x=Emotion)) +
geom_boxplot()
library(DT)
library(afex)
library(tidyverse)
# Read database
faces = read.csv("FACESIdentification.csv")
glimpse(faces)
descp = faces %>%
group_by(Emotion, Age, Sex) %>%
summarise(min=min(Identification), max=max(Identification),
avg=mean(Identification), sd=sd(Identification))
descp %>%
datatable() %>%
formatRound(columns=c('avg', 'sd'), digits=3)
disgust = faces %>%
filter(Emotion=="Disgust", Identification > 80) %>%
arrange(Emotion, Age, Sex, desc(Identification))
disgustChx = disgust %>% group_by(Age, Sex) %>% slice_head(n=3)
disgustChx %>%
datatable()
happ = faces %>%
filter(Emotion=="Happiness", Identification < 96 & Identification > 88) %>%
arrange(Emotion, Age, Sex, Identification)
happChx = happ %>% group_by(Age, Sex) %>% slice_head(n=3)
happChx %>%
datatable()
set.seed(123)
neutral = faces %>%
filter(Emotion=="Neutral", Identification < 95 & Identification > 90) %>%
arrange(Emotion, Age, Sex, Identification)
neutralChx = neutral %>% group_by(Emotion, Age, Sex) %>% slice_sample(n=3)
neutralChx %>%
datatable()
set.seed(374)
fear = faces %>%
filter(Emotion=="Fear", Identification < 95 & Identification > 89) %>%
arrange(Emotion, Age, Sex, Identification)
fearChx = fear %>% group_by(Emotion, Age, Sex) %>% slice_sample(n=3)
fearChx %>%
datatable()
set.seed(684)
anger = faces %>%
filter(Emotion=="Anger", Identification < 95 & Identification > 88) %>%
arrange(Emotion, Age, Sex, Identification)
angerChx = anger %>% group_by(Emotion, Age, Sex) %>% slice_sample(n=3)
angerChx %>%
datatable()
selected = rbind(happChx, fearChx, neutralChx, angerChx)
anov = aov_ez(data=selected, dv="Identification", between=c("Emotion","Age", "Sex"), id="Picture")
knitr::kable(nice(anov))
ggplot(data = selected, aes(y = Identification, x=Emotion)) +
geom_boxplot()
ggplot(data = selected, aes(y = Identification, x=Emotion)) +
geom_boxplot() + facet_grid(Age~Sex)
write.csv(selected, file="FACESselected.csv", row.names = F)
knitr::opts_chunk$set(cache=F, echo=F, message=F, warning=F)
#library(afex)     # ANOVA
#library(emmeans)  # Posthoc ANOVA
#library(DT)       # Format table
library(psych)    # Descriptive data including normality index
library(tidyverse)# dplyr + tidyr + ggplot2
library(QuantPsyc)
library(ggthemr)  # Collection of themes for ggplot2
#library(predata)  # Homemade library to prepare data | devtools::install_github('cogitos/predata')
#library(statxp)   # Homemade library to report results | devtools::install_github('cogitos/statxp')
#library(Routliers)# Robust outliers detection, e.g. MAD
#library(ggstatsplot)
#library(tableone) # Tableau de descriptives avec des p values
#options(table_counter=T)
#ggthemr('fresh')
pd = position_dodge(.1) # move them .05 to the left and right
dodge <- position_dodge(width=0.9) # errorbar position in histogram
DATA = NULL
STATS = list(NULL)
# Load data
dt = read.csv("data_ASD-RSD.csv")
rsd = dt %>% select(tidyselect::starts_with("retirm"))
rsd = dt %>% tidyselect::select(tidyselect::starts_with("retirm"))
rsd = dt %>% dplyr::select(tidyselect::starts_with("retirm"))
asd = dt %>% dplyr::select(starts_with("ASD"), -ASD.TT)
# Multivariate Normality Tests (Madria test, psych package)
# select only columns of interest
mardia(rsd)
mardia(asd)
mult.norm(rsd)
mult.norm(asd)
rsdMadria= mult.norm(rsd)
# Filter data based on age
dt55 = filter(dt, Age < 55)
rsd55 = dt55 %>% select(starts_with("retirm"))
rsd55 = dt55 %>% dplyr::select(starts_with("retirm"))
asd55 = dt55 %>% dplyr::select(starts_with("ASD"), -ASD.TT)
# Multivariate Normality Tests (Madria test, psych package)
# select only columns of interest
mardia(rsd55)
mardia(asd55)
mult.norm(rsd55)
mult.norm(asd)
madriaRSD = mult.norm(rsd55)
madriaRSD$CriticalDsq
madriaRSD$mult.test
madriaRSD$mult.test[2,3]
knitr::opts_chunk$set(cache=F, echo=F, message=F, warning=F)
#library(afex)     # ANOVA
#library(emmeans)  # Posthoc ANOVA
#library(DT)       # Format table
library(psych)    # Descriptive data including normality index
library(tidyverse)# dplyr + tidyr + ggplot2
library(QuantPsyc)
library(ggthemr)  # Collection of themes for ggplot2
#library(predata)  # Homemade library to prepare data | devtools::install_github('cogitos/predata')
#library(statxp)   # Homemade library to report results | devtools::install_github('cogitos/statxp')
#library(Routliers)# Robust outliers detection, e.g. MAD
#library(ggstatsplot)
#library(tableone) # Tableau de descriptives avec des p values
#options(table_counter=T)
#ggthemr('fresh')
pd = position_dodge(.1) # move them .05 to the left and right
dodge <- position_dodge(width=0.9) # errorbar position in histogram
DATA = NULL
STATS = list(NULL)
# Load data
dt = read.csv("data_ASD-RSD.csv")
rsd = dt %>% dplyr::select(tidyselect::starts_with("retirm"))
asd = dt %>% dplyr::select(starts_with("ASD"), -ASD.TT)
dt[,c(3,5,6)]
rev(1.34)
rev(0.34)
install.packages("SynologyDrive/Perso/2-Areas/Programming/R/examstat/", pkgs = T)
install.packages("SynologyDrive/Perso/2-Areas/Programming/R/examstat/")
install.packages("SynologyDrive/Perso/2-Areas/Programming/R/examstat/")
install.packages("SynologyDrive/Perso/2-Areas/Programming/R/examstat/", repos = NULL, type="source")
getNotes <-
function(dt, coefNote, firstQ="Q1", lastQ="C12"){
# Define the Note/Letter equivalence
scores = c(0, 50, 54, 59, 63, 67, 72, 76, 80, 86, 90, 94, 100)
grades = c("E", "D", "D+", "C-", "C", "C+", "B-", "B", "B+", "A-", "A", "A+")
# Compute the total exam score on 100 and add corresponding grades
notes = dt %>%
filter(!if_all(UQ(firstQ):UQ(lastQ), is.na)) %>%
mutate(Total = rowSums(select_if(., is.numeric), na.rm = TRUE)) %>%
mutate(Note = Total*UQ(coefNote)) %>%
mutate(Grade = cut(Note,
breaks = UQ(scores),
labels = UQ(grades),
right = FALSE,
include.lowest = TRUE))
return(notes)
}
histTot = function(dt, Total="Total", xMin=35, xMax=50){
histTot = ggplot(dt, aes(x=Total)) +
geom_histogram(binwidth=1, aes(y=..density..), colour="black", fill="white") +
geom_density(alpha=.2, fill="#FF6666") +
xlim(xMin, xMax)
return(histTot)
}
pcentQ = function(ptMax, dt){
pcent = ptMax %>%
select(-c(1, 2)) %>%
pivot_longer(everything(), names_to = "Question", values_to = "MaxPts") %>%
left_join(dt, ., by = "Question") %>%
mutate(Pcent = (Moy/MaxPts)*100) %>%
mutate(QType = case_when(
str_detect(Question, "C") ~ "Short",
str_detect(Question, "Q") ~ "QCM"))
return(pcent)
}
plotByQuest = function(dt){
plotByQuest = ggplot(dt, aes(x=Question, y=Moy)) +
geom_bar(stat="identity") +
ylab("Moyenne réussite (scores bruts)") +
ggtitle("Scores bruts par question")
return(ggplotly(plotByQuest))
}
plotByQuestPcent = function(dt, QType=FALSE, threshold=70){
if( QType ){
plot = ggplot(dt, aes(x=QNum, y=Pcent)) +
geom_bar(stat="identity", aes(fill=QType)) +
ylab("Pourcentage réussite") +
geom_hline(yintercept=70, linetype="dashed", color = "red") +
ggtitle("Pourentages réussite par question") +
scale_color_brewer(palette = "RdYlBu") +
facet_grid(QType ~ .) +  theme(legend.position = "none")
}else{
plot = ggplot(dt, aes(x=QNum, y=Pcent)) +
geom_bar(stat="identity") +
ylab("Pourcentage réussite") +
geom_hline(yintercept=70, linetype="dashed", color = "red") +
ggtitle("Pourentages réussite par question") +
theme(legend.position = "none")
}
return(ggplotly(plot))
}
statExam <-
function(dt, note="Note", exam=NULL){
notes %>%
group_by(UQ(exam)) %>%
summarise(
Moy = mean(!!as.name(note), na.rm=T),
ET = sd(!!as.name(note), na.rm=T),
Min = min(!!as.name(note), na.rm=T),
Max = max(!!as.name(note), na.rm=T)
) %>% ``
statExam <-
function(dt, note="Note", exam=NULL){
notes %>%
group_by(UQ(exam)) %>%
summarise(
Moy = mean(!!as.name(note), na.rm=T),
ET = sd(!!as.name(note), na.rm=T),
Min = min(!!as.name(note), na.rm=T),
Max = max(!!as.name(note), na.rm=T)
) %>%
mutate_if(is.numeric, round, 2)
}
install.packages("SynologyDrive/Perso/2-Areas/Programming/R/examstat/", pkgs = T)
install.packages("SynologyDrive/Perso/2-Areas/Programming/R/examstat/", repos = NULL, type="source")
getNotes <-
function(dt, coefNote, firstQ="Q1", lastQ="C12"){
# Define the Note/Letter equivalence
scores = c(0, 50, 54, 59, 63, 67, 72, 76, 80, 86, 90, 94, 100)
grades = c("E", "D", "D+", "C-", "C", "C+", "B-", "B", "B+", "A-", "A", "A+")
# Compute the total exam score on 100 and add corresponding grades
notes = dt %>%
filter(!if_all(UQ(firstQ):UQ(lastQ), is.na)) %>%
mutate(Total = rowSums(select_if(., is.numeric), na.rm = TRUE)) %>%
mutate(Note = Total*UQ(coefNote)) %>%
mutate(Grade = cut(Note,
breaks = UQ(scores),
labels = UQ(grades),
right = FALSE,
include.lowest = TRUE))
return(notes)
}
install.packages("SynologyDrive/Perso/2-Areas/Programming/R/examstat/", repos = NULL, type="source")
roxygen2::roxygenise().
roxygen2::roxygenise()
setwd("~/SynologyDrive/Perso/2-Areas/Programming/R/examstat/man")
roxygen2::roxygenise().
roxygen2::roxygenise()
